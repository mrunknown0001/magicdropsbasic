import{u as I,b as ee,r as d,b9 as U,s as f,z as i}from"./index-C2zOcIr5.js";const re=o=>{const E="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";let w="";for(let n=0;n<o;n++)w+=E.charAt(Math.floor(Math.random()*E.length));return w};function se(o,E={}){const{initialRefresh:w=!0}=E,{user:n,profile:C}=I(),{settings:v}=ee(),_=d.useRef(null),$=d.useRef(!1),V=d.useRef(!1),[k,g]=d.useState(null),[D,c]=d.useState(!1),[P,u]=d.useState(null),S=d.useRef(o),b=d.useCallback(async()=>{if(!o||!n)return null;if(U(C,v).isBlocked)return console.log("🛡️ KYC verification required, blocking task assignment access"),g(null),c(!1),u(new Error("KYC-Verifizierung erforderlich für den Zugriff auf Aufgaben.")),null;c(!0),u(null);try{const{data:e}=await f.auth.getSession();if(!e.session)throw console.error("Session invalid when fetching task assignment"),new Error("Your session has expired. Please refresh the page and log in again.");const{data:r,error:s}=await f.from("task_assignments").select("*, task_template:task_template_id(*)").eq("id",o).eq("assignee_id",n.id).maybeSingle();if(s)throw console.error("Database error in fetchTaskAssignment:",s),s;return r?(g(r),r):(g(null),null)}catch(e){if(console.error("Error fetching task assignment:",e),e instanceof Error&&e.message.includes("session has expired"))i.error("Ihre Sitzung ist abgelaufen. Bitte aktualisieren Sie die Seite und melden Sie sich erneut an.");else{const r=e instanceof Error?e.message:"Failed to fetch task assignment";console.error("Error details:",JSON.stringify(e,null,2)),u(new Error(r)),i.error(`Fehler beim Laden der Aufgabe: ${r}`)}return null}finally{c(!1)}},[o,n,C,v]),B=d.useCallback(async t=>{if(console.log(`updateCurrentStep called with stepNumber: ${t}`),console.log(`Current assignmentId: ${o}, userId: ${n==null?void 0:n.id}`),!o||!n)return console.error("Missing assignmentId or user in updateCurrentStep"),null;if(U(C,v).isBlocked)return console.log("🛡️ KYC verification required, blocking task assignment updates"),i.error("KYC-Verifizierung erforderlich für Aufgaben-Updates."),null;if(!k)return console.error("Cannot update step: no current task assignment available"),i.error("Fehler: Aufgabendaten nicht verfügbar"),null;c(!0),u(null);try{console.log("Executing Supabase update query in updateCurrentStep..."),console.log(`Query parameters: id=${o}, assignee_id=${n.id}, current_step=${t}`);const{data:r,error:s}=await f.from("task_assignments").update({current_step:t,updated_at:new Date().toISOString()}).eq("id",o).eq("assignee_id",n.id).select().maybeSingle();if(console.log("Supabase response:",{data:r,error:s}),s)throw console.error("Supabase error in updateCurrentStep:",s),new Error(`Supabase error: ${s.message}`);if(r)return console.log("Successfully updated task step:",r),g(a=>a?{...a,current_step:t}:r),r;{console.warn("No data returned from Supabase update operation"),g(l=>l?{...l,current_step:t}:null);const a=k?{...k,current_step:t}:null;if(a)return console.log("Using fallback assignment data:",a),a}return console.log("Returning null from updateCurrentStep - no data found"),null}catch(r){const s=r instanceof Error?r.message:"Failed to update task step";return console.error("Error in updateCurrentStep:",r),console.error("Stack trace:",new Error().stack),u(new Error(s)),i.error(`Error: ${s}`),null}finally{c(!1),console.log("updateCurrentStep operation completed")}},[o,b,k,n,C,v]),j=d.useCallback(async t=>{if(!o||!n)return console.error("Cannot update video chat status: assignmentId or user is missing"),null;c(!0),u(null),console.log("Updating video chat status:",{assignmentId:o,userId:n.id,newStatus:t});try{const e=t==="accepted"?re(6):null,{data:r}=await f.from("task_assignments").select("current_step").eq("id",o).eq("assignee_id",n.id).single(),s=r==null?void 0:r.current_step;console.log("Current step from database:",s),s==null&&console.warn("Could not retrieve current_step from the database! Using fallback value of 1"),console.log("Using database function to bypass RLS policies");const{data:a,error:l}=await f.rpc("update_task_assignment_video_chat_status",{p_assignment_id:o,p_user_id:n.id,p_status:t,p_current_step:s??1,p_code:e});if(console.log("RPC function response:",{data:a,error:l}),l)return console.error("Database function error:",l),console.error("Error details:",{code:l.code,details:l.details,hint:l.hint,message:l.message}),l.message&&l.message.includes("permission")?i.error("Keine Berechtigung für diese Aktion"):l.message&&l.message.includes("not found")?i.error("Aufgabe wurde nicht gefunden"):i.error(`Fehler: ${l.message||"Unbekannter Fehler beim Speichern"}`),u(new Error(`Fehler beim Aktualisieren des Video-Chat-Status: ${l.message||"Unbekannter Fehler"}`)),null;if(!a||!Array.isArray(a)||a.length===0)return console.warn("Database function returned no rows - update likely failed"),i.error("Update fehlgeschlagen: Keine Zeilen aktualisiert"),null;const p=a[0];return console.log("Successfully updated task using database function:",p),g(p),p}catch(e){console.error("Error in updateVideoChatStatus:",e);const r=e instanceof Error?e.message:"Failed to update video chat status";return u(new Error(r)),i.error(`Fehler beim Aktualisieren des Video-Chat-Status: ${r}`),null}finally{c(!1)}},[o,n]),K=d.useCallback(async()=>{if(!o||!n)return null;c(!0),u(null);try{const{data:t,error:e}=await f.from("task_assignments").update({status:"completed",updated_at:new Date().toISOString()}).eq("id",o).eq("assignee_id",n.id).select().maybeSingle();if(e)throw new Error(e.message);return t?(g(r=>r?{...r,status:"completed"}:t),i.success("Aufgabe erfolgreich abgeschlossen!"),t):null}catch(t){const e=t instanceof Error?t.message:"Failed to complete task";return u(new Error(e)),i.error(`Error: ${e}`),null}finally{c(!1)}},[o,n]),L=d.useCallback(async t=>{if(!o||!n)return null;console.log("Submitting task rating with form data:",t),c(!0),u(null);try{const e={task_assignment_id:o,user_id:n.id,rating_data:t,submitted_at:new Date().toISOString()};console.log("Structured rating submission:",e);const{data:r,error:s}=await f.from("task_ratings").insert(e).select().maybeSingle();if(s)throw new Error(s.message);return console.log("Rating submitted successfully, but not marking task as completed yet."),console.log("This allows the video chat flow to continue."),i.success("Bewertung erfolgreich übermittelt!"),r}catch(e){const r=e instanceof Error?e.message:"Failed to submit rating";return u(new Error(r)),i.error(`Error: ${r}`),null}finally{c(!1)}},[o,n]),x=d.useCallback(async t=>{if(!o||!n)return console.log("Cannot submit video call rating: missing assignmentId or user"),null;console.log("Submitting video call rating with form data:",t),c(!0),u(null);try{const e={task_assignment_id:o,user_id:n.id,rating_data:t,rating_type:"video_call",submitted_at:new Date().toISOString()};console.log("Structured video call rating submission:",e);const{data:r,error:s}=await f.from("task_ratings").insert(e).select().maybeSingle();if(s)throw new Error(s.message);const{data:a,error:l}=await f.from("task_assignments").update({video_call_rating_completed:!0,video_call_rating_data:t}).eq("id",o).select().maybeSingle();if(l)throw new Error(l.message);return i.success("Video-Chat Bewertung erfolgreich übermittelt!"),a?(g(a),a):r}catch(e){const r=e instanceof Error?e.message:"Failed to submit video call rating";return u(new Error(r)),i.error(`Error: ${r}`),null}finally{c(!1)}},[o,n]),z=d.useCallback(async()=>{if(!o||!n)return null;c(!0),u(null);try{const{data:t,error:e}=await f.from("task_assignments").update({current_step:0,video_chat_status:"not_started",updated_at:new Date().toISOString()}).eq("id",o).eq("assignee_id",n.id).select().single();if(e)throw new Error(e.message);return t?(g(r=>r?{...r,current_step:0,video_chat_status:"not_started"}:t),t):null}catch(t){const e=t instanceof Error?t.message:"Failed to reset task";return u(new Error(e)),i.error(`Error: ${e}`),null}finally{c(!1)}},[o,n]),q=d.useRef(0),R=d.useRef(!1),N=d.useCallback(async(t="accepted")=>{if(R.current)return console.log("Video submissions fetch already in progress, skipping"),[];const e=Date.now(),r=e-q.current;if(r<1500&&q.current>0)return console.log(`Video fetch cooling period active (${r}ms < 1500ms), skipping`),[];if(!n)return console.log("No user found, skipping video submissions fetch"),[];R.current=!0,q.current=e,c(!0),u(null);try{console.log(`Fetching video submissions with status: ${t}`);const s=new Promise(async(p,F)=>{try{const{data:m,error:A}=await f.from("task_assignments").select(`
          *,
          task_template:task_template_id(id, title, description)
        `).eq("video_chat_status",t).order("updated_at",{ascending:!1});if(A){console.error("Error in fetchPendingVideoSubmissions:",A),F(A);return}if(!m||m.length===0){console.log(`No submissions found with status '${t}'`),p([]);return}console.log(`Fetching profiles for ${m.length} submissions...`);const T=m.map(h=>h.assignee_id).filter(Boolean);if(T.length===0){console.log("No valid assignee IDs found in task assignments"),p(m);return}try{console.log("Fetching profiles with IDs using database function:",T);const{data:h,error:M}=await f.rpc("get_profiles_with_emails_by_ids",{profile_ids:T});if(console.log("Using database function to fetch profiles with emails"),M&&console.error("Error fetching profiles:",M),h&&h.length>0){console.log(`Successfully fetched ${h.length} profiles`);const O=new Map;h.forEach(y=>{O.set(y.id,y)});const W=m.map(y=>{const X=O.get(y.assignee_id);return{...y,assignee:X||null}});p(W);return}}catch(h){console.error("Error in profile fetch:",h)}p(m)}catch(m){F(m)}}),a=new Promise((p,F)=>{setTimeout(()=>{F(new Error("Timeout fetching video submissions"))},8e3)});return await Promise.race([s,a])}catch(s){console.error("Error fetching pending video submissions:",s);const a=s instanceof Error?s.message:"Failed to fetch pending submissions";return u(new Error(a)),(!(s instanceof Error)||!s.message.includes("column profiles_1.email does not exist"))&&(!(s instanceof Error)||!s.message.includes("Timeout fetching"))&&i.error(`Fehler beim Laden der Video-Chat-Anfragen: ${a}`),[]}finally{c(!1),setTimeout(()=>{R.current=!1},1500)}},[n]),Y=async(t,e)=>{if(!t)return console.error("Cannot update demo data: assignmentId is missing"),null;c(!0),u(null);try{const r={updated_at:new Date().toISOString()};e.demoEmail!==void 0&&(r.demo_email=e.demoEmail),e.demoPassword!==void 0&&(r.demo_password=e.demoPassword),e.identCode!==void 0&&(r.ident_code=e.identCode),e.identUrl!==void 0&&(r.ident_url=e.identUrl),e.phoneNumberId!==void 0&&(r.phone_number_id=e.phoneNumberId),r.demo_data={email:e.demoEmail||"",password:e.demoPassword||"",identCode:e.identCode||"",identUrl:e.identUrl||"",phoneNumberId:e.phoneNumberId||null};const{data:s,error:a}=await f.from("task_assignments").update(r).eq("id",t).select().maybeSingle();if(a)throw a;return t===S.current&&g(l=>l?{...l,...r}:s),i.success("Testdaten erfolgreich aktualisiert"),s}catch(r){console.error("Error updating demo data:",r);const s=r instanceof Error?r.message:"Failed to update demo data";return u(new Error(s)),i.error(`Fehler beim Aktualisieren der Testdaten: ${s}`),null}finally{c(!1)}},Z=async(t,e)=>{if(!t)return console.error("Cannot assign phone number: assignmentId is missing"),null;c(!0),u(null);try{const{data:r,error:s}=await f.from("task_assignments").update({phone_number_id:e,updated_at:new Date().toISOString()}).eq("id",t).select().maybeSingle();if(s)throw s;return t===S.current&&g(a=>a?{...a,phone_number_id:e}:r),i.success("Telefonnummer erfolgreich zugewiesen"),r}catch(r){console.error("Error assigning phone number:",r);const s=r instanceof Error?r.message:"Failed to assign phone number";return u(new Error(s)),i.error(`Fehler beim Zuweisen der Telefonnummer: ${s}`),null}finally{c(!1)}};d.useEffect(()=>{if(!(!o||!n)){if(o!==S.current){S.current=o,_.current&&(f.removeChannel(_.current.subscription),_.current=null),console.log("Setting up real-time subscription for assignment:",o);const t=`task_assignment_${o}`,e=f.channel(t).on("postgres_changes",{event:"*",schema:"public",table:"task_assignments",filter:`id=eq.${o}`},r=>{console.log("Real-time update received:",r),b()}).subscribe(r=>{console.log("Subscription status:",r)});_.current={subscription:e,channelId:t}}return()=>{_.current&&(f.removeChannel(_.current.subscription),_.current=null)}}},[o,b,n]),d.useEffect(()=>{o&&w&&!$.current&&n&&(console.log(`Fetching initial task assignment data for ID: ${o}`),b(),$.current=!0),o!==S.current&&($.current=!1,V.current=!1),o||g(null)},[o,b,w,n]);const J=d.useCallback(async t=>{if(!o||!n)return null;c(!0),u(null);try{const{data:e,error:r}=await f.from("task_assignments").update({status:"submitted",submitted_at:new Date().toISOString(),submission_data:t,updated_at:new Date().toISOString()}).eq("id",o).eq("assignee_id",n.id).select().single();if(r)throw new Error(r.message);if(e){if(e.task_id){console.log(`🔄 Updating task status to submitted for task_id: ${e.task_id}`);const{error:s}=await f.from("tasks").update({status:"submitted",updated_at:new Date().toISOString()}).eq("id",e.task_id);s?console.error("Error updating task status:",s):console.log("✅ Successfully updated both task_assignments and tasks status to submitted")}return g(e),i.success("Aufgabe erfolgreich eingereicht!"),e}return null}catch(e){const r=e instanceof Error?e.message:"Failed to submit task";return u(new Error(r)),i.error(`Error: ${r}`),null}finally{c(!1)}},[o,n]),Q=d.useCallback(async(t,e)=>{if(!n)return null;c(!0),u(null);try{const{data:r,error:s}=await f.from("task_assignments").update({status:"completed",reviewed_by:n.id,reviewed_at:new Date().toISOString(),admin_notes:e||null,updated_at:new Date().toISOString()}).eq("id",t).eq("status","submitted").select().single();if(s)throw new Error(s.message);if(r){try{console.log(`Creating time entry for approved task: ${t}`);const a=await fetch("/api/time-entries/create",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({taskAssignmentId:t,approvedBy:n.id})});if(a.ok){const l=await a.json();l.success&&l.data?(console.log("Time entry created successfully:",l.data),i.success(`Aufgabe genehmigt und ${l.data.hours||0} Stunden hinzugefügt!`)):(console.log("Time entry creation completed:",l.message),i.success("Aufgabe erfolgreich genehmigt!"))}else{const l=await a.json();console.warn("Failed to create time entry:",l),i.error("Aufgabe genehmigt, aber Zeiterfassung fehlgeschlagen")}}catch(a){console.error("Error creating time entry:",a),i.success("Aufgabe genehmigt (Zeiterfassung fehlgeschlagen)")}return r}return null}catch(r){const s=r instanceof Error?r.message:"Failed to approve task";return u(new Error(s)),i.error(`Error: ${s}`),null}finally{c(!1)}},[n]),G=d.useCallback(async(t,e,r)=>{if(!n)return null;c(!0),u(null);try{const{data:s,error:a}=await f.from("task_assignments").update({status:"rejected",reviewed_by:n.id,reviewed_at:new Date().toISOString(),rejection_reason:e,admin_notes:r||null,updated_at:new Date().toISOString()}).eq("id",t).eq("status","submitted").select().single();if(a)throw new Error(a.message);return s?(i.success("Aufgabe abgelehnt."),s):null}catch(s){const a=s instanceof Error?s.message:"Failed to reject task";return u(new Error(a)),i.error(`Error: ${a}`),null}finally{c(!1)}},[n]),H=d.useCallback(async()=>{if(!o||!n)return null;c(!0),u(null);try{const{data:t,error:e}=await f.from("task_assignments").update({status:"pending",current_step:0,video_chat_status:"not_started",document_step_completed:!1,video_call_rating_completed:!1,submission_data:null,submitted_at:null,updated_at:new Date().toISOString()}).eq("id",o).eq("assignee_id",n.id).eq("status","rejected").select().single();if(e)throw new Error(e.message);if(t){if(t.task_id){console.log(`🔄 Updating task status to pending for task_id: ${t.task_id}`);const{error:r}=await f.from("tasks").update({status:"pending",updated_at:new Date().toISOString()}).eq("id",t.task_id);r?console.error("Error updating task status:",r):console.log("✅ Successfully updated both task_assignments and tasks status to pending")}return g(t),i.success("Aufgabe wurde neu gestartet!"),t}return null}catch(t){const e=t instanceof Error?t.message:"Failed to restart task";return u(new Error(e)),i.error(`Error: ${e}`),null}finally{c(!1)}},[o,n]);return{taskAssignment:k,isLoading:D,error:P,fetchTaskAssignment:b,updateCurrentStep:B,completeTaskAssignment:K,updateVideoChatStatus:j,submitTaskRating:L,submitVideoCallRating:x,resetTaskAssignment:z,submitTaskForReview:J,approveTaskSubmission:Q,rejectTaskSubmission:G,restartRejectedTask:H,fetchPendingVideoSubmissions:N,updateDemoData:Y,assignPhoneNumber:Z}}export{se as u};
