import{r as u,u as z,b as K,a as o,a0 as p,b9 as C,z as c,s as E}from"./index-C2zOcIr5.js";import{c as q}from"./connectionManager-WW8tX6Ox.js";const Y=()=>{const[F,R]=u.useState([]),[B,_]=u.useState(!0),[O,v]=u.useState(null),{user:d,profile:l}=z(),{settings:f}=K(),i=u.useCallback(async()=>{try{console.log("Fetching task templates..."),_(!0),v(null),console.log("supabaseAdmin available:",!!o);const{data:e,error:t}=await p(async()=>{console.log("Executing Supabase RPC for task templates using admin client");try{const r=await o.rpc("get_all_task_templates");return console.log("RPC response:",{data:r.data,error:r.error}),r}catch(r){console.error("RPC error, falling back to direct query:",r);const n=await o.from("task_templates").select("*").order("created_at",{ascending:!1});return console.log("Fallback query response:",{data:n.data,error:n.error}),n}});if(t)throw console.error("Error fetching task templates:",t),t;console.log("Task templates fetched successfully:",e?e.length:0,"templates"),console.log("Templates data:",e);let s=e;(l==null?void 0:l.role)==="employee"&&C(l,f).isBlocked&&(console.log("🛡️ KYC verification required for employee, returning empty templates array"),s=[]),R(s)}catch(e){console.error("Failed to fetch task templates:",e),v(e instanceof Error?e:new Error("Failed to fetch task templates")),c.error("Failed to fetch task templates"),q.scheduleReconnect("task-templates-channel")}finally{_(!1)}},[l,f]),m=u.useRef(null),h=u.useCallback(()=>{var s;(s=m.current)!=null&&s.subscription&&o.removeChannel(m.current.subscription);const e="task-templates-channel-stable",t=o.channel(e).on("postgres_changes",{event:"*",schema:"public",table:"task_templates"},r=>{console.log("Task templates change received:",r),window.dispatchEvent(new CustomEvent("fetch-start")),i().finally(()=>{window.dispatchEvent(new CustomEvent("fetch-end"))})}).subscribe(r=>{r==="TIMED_OUT"||r==="CHANNEL_ERROR"?q.scheduleReconnect(e,2e3):r==="SUBSCRIBED"&&i()});m.current={subscription:t,channelId:e}},[i]);u.useEffect(()=>{i(),h();const e=()=>{console.log("Reconnecting task templates subscription"),i(),h()};return window.addEventListener("supabase-reconnect",e),()=>{m.current&&o.removeChannel(m.current.subscription),window.removeEventListener("supabase-reconnect",e)}},[d,i,h]);const D=async e=>{try{window.dispatchEvent(new CustomEvent("fetch-start"));const{data:t,error:s}=await p(async()=>await o.from("task_templates").insert([{...e,created_by:(d==null?void 0:d.id)||""}]).select().single());if(s)throw s;return c.success("Task template created successfully"),t}catch(t){throw console.error("Failed to create task template:",t),c.error("Failed to create task template"),t}finally{window.dispatchEvent(new CustomEvent("fetch-end"))}},A=async(e,t)=>{try{window.dispatchEvent(new CustomEvent("fetch-start"));const{data:s,error:r}=await p(async()=>await o.from("task_templates").update(t).eq("id",e).select().single());if(r)throw r;return i(),c.success("Task template updated successfully"),s}catch(s){throw console.error("Failed to update task template:",s),c.error("Failed to update task template"),s}finally{window.dispatchEvent(new CustomEvent("fetch-end"))}},I=async e=>{try{window.dispatchEvent(new CustomEvent("fetch-start"));const{error:t}=await p(async()=>await o.from("task_templates").delete().eq("id",e));if(t)throw t;return i(),c.success("Task template deleted successfully"),!0}catch(t){throw console.error("Failed to delete task template:",t),c.error("Failed to delete task template"),t}finally{window.dispatchEvent(new CustomEvent("fetch-end"))}},T=async e=>{console.log("getTemplateById called with id:",e);try{window.dispatchEvent(new CustomEvent("fetch-start")),console.log("Using supabaseAdmin client to fetch template");const{data:t,error:s}=await p(async()=>(console.log("Executing Supabase query for template with id:",e),await o.from("task_templates").select("*").eq("id",e).single()));if(console.log("Template query result:",{data:t,error:s}),s)throw console.error("Error in getTemplateById query:",s),s;return t?(console.log("Successfully retrieved template data:",t),t):(console.log("No template data found for id:",e),null)}catch(t){return console.error("Failed to get task template:",t),c.error("Failed to get task template"),null}finally{window.dispatchEvent(new CustomEvent("fetch-end")),console.log("getTemplateById finished")}},x=async(e,t,s,r)=>{window.dispatchEvent(new CustomEvent("fetch-start"));try{if(!e)throw new Error("Template ID is required");if(!t)throw new Error("Assignee ID is required");const n=T(e),P=new Promise((J,L)=>{setTimeout(()=>L(new Error("Template fetch timed out")),5e3)}),a=await Promise.race([n,P]);if(!a)throw new Error("Template not found");console.log("Assigning template to employee:",{templateId:e,assigneeId:t,dueDate:s});const w=a.type,b=!(w==="platzhalter"||w==="andere"||w==="other")&&a&&a.required_attachments&&Array.isArray(a.required_attachments)&&a.required_attachments.length>0;console.log("Creating task with document step required:",b,"Template type:",w);const{data:g,error:y}=await p(async()=>await E.from("tasks").insert([{title:a.title,description:a.description,client:a.type==="bankdrop"?"Bank":"Client",status:"pending",priority:a.priority,assignee_id:t,due_date:s?new Date(s).toISOString():new Date(Date.now()+14*24*60*60*1e3).toISOString(),task_template_id:e,type:a.type,payment_amount:r!==void 0?r:a.payment_amount}]).select().single(),3,1e3);if(y)throw console.error("Error creating task:",JSON.stringify(y,null,2)),y;console.log("Task created successfully:",g);const{data:S,error:k}=await p(async()=>await E.from("task_assignments").insert([{task_template_id:e,assignee_id:t,due_date:s?new Date(s).toISOString():new Date(Date.now()+14*24*60*60*1e3).toISOString(),status:"pending",current_step:0,video_chat_status:"not_started",created_by:d==null?void 0:d.id,task_id:g.id,document_step_required:b,document_step_completed:!1,custom_payment_amount:r||null}]).select().single(),3,1e3);if(k)throw console.error("Error creating task assignment:",JSON.stringify(k,null,2)),await E.from("tasks").delete().eq("id",g.id),k;return console.log("Task assignment created successfully:",S),c.success("Task assigned successfully"),S}catch(n){throw console.error("Failed to assign task from template:",n),c.error(n instanceof Error?n.message:"Failed to assign task from template"),n}finally{window.dispatchEvent(new CustomEvent("fetch-end"))}},N=(l==null?void 0:l.role)==="employee"?C(l,f):{isBlocked:!1};return{templates:F,loading:B,error:O,isKycBlocked:N.isBlocked,fetchTemplates:i,createTemplate:D,updateTemplate:A,deleteTemplate:I,getTemplateById:T,createTaskFromTemplate:x}};export{Y as u};
