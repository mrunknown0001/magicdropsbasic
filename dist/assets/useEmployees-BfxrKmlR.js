import{r as E,a as w,a0 as u,s as p,z as y}from"./index-C2zOcIr5.js";import{c as S}from"./connectionManager-WW8tX6Ox.js";const O=()=>{const[_,b]=E.useState([]),[T,g]=E.useState(!0),[$,C]=E.useState(null),h=E.useCallback(async(t=!1)=>{try{const a=sessionStorage.getItem("employeesList"),r=_.filter(s=>s._manuallyUpdated),e=Date.now();if(a&&!t)try{const s=JSON.parse(a);if(s.lastFetchTime&&e-s.lastFetchTime<5*60*1e3&&(console.log("Using cached employee data"),s.employees&&Array.isArray(s.employees))){let c=s.employees;r.length>0&&(c=c.map(m=>{const d=r.find(n=>n.id===m.id);return d?{...m,banned_until:d.banned_until,_manuallyUpdated:!0,_lastUpdateTime:d._lastUpdateTime}:m})),b(c);return}}catch(s){console.error("Error parsing cached employee data:",s)}const{data:i,error:l}=await w.rpc("get_profiles_with_emails");if(l)throw l;let o=(i||[]).map(s=>({...s,name:`${s.first_name||""} ${s.last_name||""}`.trim()||"Unnamed"}));if(o.sort((s,c)=>(s.first_name||"").localeCompare(c.first_name||"")),r.length>0){const s=r;s.length>0&&(console.log(`Preserving ${s.length} manually updated employees`),o=o.map(c=>{const m=s.find(d=>d.id===c.id);return m?(console.log(`Preserving manual status for ${m.name}, banned until: ${m.banned_until||"not banned"}`),{...c,banned_until:m.banned_until,_manuallyUpdated:!0,_lastUpdateTime:m._lastUpdateTime}):c}))}try{const s=sessionStorage.getItem("employeesList");if(s){const c=JSON.parse(s);if(c.employees&&Array.isArray(c.employees)){const m=c.employees.filter(d=>d._manuallyUpdated&&d.id&&d.banned_until!==void 0);m.length>0&&(console.log(`Found ${m.length} manually updated employees in session storage`),o=o.map(d=>{const n=m.find(f=>f.id===d.id);return n?(console.log(`Applying stored manual status for ${d.name}, banned until: ${n.banned_until||"not banned"}`),{...d,banned_until:n.banned_until,_manuallyUpdated:!0,_lastUpdateTime:n._lastUpdateTime}):d}))}}}catch(s){console.error("Error applying stored manual updates:",s)}try{sessionStorage.setItem("employeesList",JSON.stringify({employees:o,lastFetchTime:e}))}catch(s){console.error("Error caching employee data:",s)}b(o)}catch(a){console.error("Error fetching employees:",a),C(a instanceof Error?a:new Error("Failed to fetch employees")),S.scheduleReconnect("profiles-channel")}finally{g(!1)}},[_]),U=E.useRef(null),k=E.useCallback(()=>{var r;(r=U.current)!=null&&r.subscription&&w.removeChannel(U.current.subscription);const t="profiles-channel-stable",a=w.channel(t).on("postgres_changes",{event:"*",schema:"public",table:"profiles"},e=>{if(console.log("Profiles change received:",e),_.some(l=>l._manuallyUpdated&&l._lastUpdateTime&&e.new&&typeof e.new=="object"&&"id"in e.new&&l.id===e.new.id)){if(console.log("Skipping automatic refresh because manual updates exist for employee:",e.new&&typeof e.new=="object"&&"id"in e.new?e.new.id:"unknown"),e.new&&typeof e.new=="object"&&"id"in e.new){const l=e.new.id,o=_.find(s=>s._manuallyUpdated&&s.id===l);o&&b(s=>s.map(c=>c.id===l?{...e.new,banned_until:o.banned_until,_manuallyUpdated:!0,_lastUpdateTime:o._lastUpdateTime}:c))}}else h()}).subscribe(e=>{(e==="TIMED_OUT"||e==="CHANNEL_ERROR")&&S.scheduleReconnect(t)});U.current={subscription:a,channelId:t}},[h,_]);return E.useEffect(()=>{h(),k();const t=()=>{console.log("Reconnecting profiles subscription"),h(),k()};return window.addEventListener("supabase-reconnect",t),()=>{U.current&&w.removeChannel(U.current.subscription),window.removeEventListener("supabase-reconnect",t)}},[]),{employees:_,loading:T,error:$,createEmployee:async t=>{try{window.dispatchEvent(new CustomEvent("fetch-start")),g(!0);const{data:a,error:r}=await u(async()=>await w.auth.admin.createUser({email:t.email,password:t.password,email_confirm:!0,user_metadata:{first_name:t.first_name,last_name:t.last_name,position:t.position||"",role:"employee"}}));if(r)throw r;if(a.user){await new Promise(l=>setTimeout(l,1e3));const{data:e,error:i}=await u(async()=>await p.from("profiles").select("*").eq("id",a.user.id).single());if(i&&i.code!=="PGRST116")throw i;if(!e){const{error:l}=await u(async()=>await p.from("profiles").insert([{id:a.user.id,first_name:t.first_name,last_name:t.last_name,role:"employee"}]));if(l)throw l}}return y.success("Mitarbeiter erfolgreich erstellt"),await h(!0),a.user}catch(a){throw console.error("Error creating employee:",a),y.error(a instanceof Error?a.message:"Fehler beim Erstellen des Mitarbeiters"),a}finally{g(!1),window.dispatchEvent(new CustomEvent("fetch-end"))}},updateEmployee:async(t,a)=>{try{window.dispatchEvent(new CustomEvent("fetch-start")),g(!0);const{error:r}=await u(async()=>await w.auth.admin.updateUserById(t,{user_metadata:{first_name:a.first_name,last_name:a.last_name},role:a.role}));if(r)throw r;const{error:e}=await u(async()=>await p.from("profiles").update({first_name:a.first_name,last_name:a.last_name,role:a.role}).eq("id",t));if(e)throw e;y.success("Mitarbeiter erfolgreich aktualisiert"),await h(!0)}catch(r){throw console.error("Error updating employee:",r),y.error(r instanceof Error?r.message:"Fehler beim Aktualisieren des Mitarbeiters"),r}finally{g(!1),window.dispatchEvent(new CustomEvent("fetch-end"))}},updateEmployeeStatus:async(t,a)=>{try{if(window.dispatchEvent(new CustomEvent("fetch-start")),g(!0),a==="Inaktiv"){const{error:e}=await u(async()=>await w.auth.admin.updateUserById(t,{ban_duration:"87600h"}));if(e)throw e;console.log(`Employee ${t} deactivated in auth system`)}else{const{error:e}=await u(async()=>await w.auth.admin.updateUserById(t,{ban_duration:"0h"}));if(e)throw e;console.log(`Employee ${t} activated in auth system`)}const r=a==="Inaktiv"?new Date(Date.now()+10*365*24*60*60*1e3).toISOString():null;b(e=>e.map(i=>i.id===t?(console.log(`Updating local employee ${i.name} status to ${a}, banned_until: ${r}`),{...i,banned_until:r,_manuallyUpdated:!0,_lastUpdateTime:Date.now()}):i));try{const e=sessionStorage.getItem("employeesList");let i=e?JSON.parse(e):{employees:[]};if(i.employees){let l=!1;if(i.employees=i.employees.map(o=>o.id===t?(l=!0,{...o,banned_until:r,_manuallyUpdated:!0,_lastUpdateTime:Date.now()}):o),!l){const o=_.find(s=>s.id===t);o&&i.employees.push({...o,banned_until:r,_manuallyUpdated:!0,_lastUpdateTime:Date.now()})}sessionStorage.setItem("employeesList",JSON.stringify({...i,lastFetchTime:Date.now()}))}}catch(e){console.error("Error updating session storage:",e)}try{const{error:e}=await p.from("profiles").update({banned_until:r,updated_at:new Date().toISOString(),status_manually_set:!0}).eq("id",t);e&&console.error("Error updating profile banned_until:",e)}catch(e){console.error("Failed to update profile banned_until:",e)}y.success(`Mitarbeiter ${a==="Aktiv"?"aktiviert":"deaktiviert"}`)}catch(r){throw console.error("Error updating employee status:",r),y.error(r instanceof Error?r.message:"Fehler beim Aktualisieren des Mitarbeiterstatus"),r}finally{g(!1),window.dispatchEvent(new CustomEvent("fetch-end"))}},deleteEmployee:async(t,a)=>{try{window.dispatchEvent(new CustomEvent("fetch-start")),g(!0),console.log(`Starting comprehensive deletion process for employee ${t} (${a||"Unknown"})`);const{error:r}=await u(async()=>await p.from("task_comments").delete().eq("user_id",t));r?console.warn("Error deleting task comments:",r):console.log("Task comments deleted");const{error:e}=await u(async()=>await p.from("task_attachments").delete().eq("user_id",t));e?console.warn("Error deleting task attachments:",e):console.log("Task attachments deleted");const{error:i}=await u(async()=>await p.from("task_assignments").delete().eq("assignee_id",t));i?console.warn("Error deleting task assignments:",i):console.log("Task assignments deleted");const{error:l}=await u(async()=>await p.from("tasks").delete().eq("assignee_id",t));l?console.warn("Error deleting tasks:",l):console.log("Tasks deleted");const{error:o}=await u(async()=>await p.from("contract_assignments").delete().eq("user_id",t));o?console.warn("Error deleting contract assignments:",o):console.log("Contract assignments deleted");const{error:s}=await u(async()=>await p.from("phone_numbers").update({assignee_id:null}).eq("assignee_id",t));s?console.warn("Error clearing phone assignments:",s):console.log("Phone number assignments cleared");const{error:c}=await u(async()=>await p.from("phone_messages").delete().eq("user_id",t));c?console.warn("Error deleting phone messages:",c):console.log("Phone messages deleted");try{const{data:n}=await p.storage.from("kyc_documents").list(t);if(n&&n.length>0){const f=n.map(v=>`${t}/${v.name}`);await p.storage.from("kyc_documents").remove(f),console.log(`Deleted ${n.length} KYC document(s) from storage`)}}catch(n){console.warn("Error deleting KYC documents from storage:",n)}try{const{data:n}=await p.storage.from("task_attachments").list("",{search:t});if(n&&n.length>0){const f=n.map(v=>v.name);await p.storage.from("task_attachments").remove(f),console.log(`Deleted ${n.length} task attachment(s) from storage`)}}catch(n){console.warn("Error deleting task attachments from storage:",n)}const{error:m}=await u(async()=>await p.from("profiles").delete().eq("id",t));m?console.warn("Error deleting profile:",m):console.log("Profile deleted");const{error:d}=await u(async()=>await w.auth.admin.deleteUser(t));if(d)throw console.error("Auth deletion failed:",d),d;console.log("User deleted from auth system"),b(n=>n.filter(f=>f.id!==t));try{const n=sessionStorage.getItem("employeesList");if(n){const f=JSON.parse(n);f.employees&&(f.employees=f.employees.filter(v=>v.id!==t),sessionStorage.setItem("employeesList",JSON.stringify(f)))}}catch(n){console.warn("Error updating session storage:",n)}y.success(`Mitarbeiter ${a||""} wurde vollständig gelöscht`),console.log(`✅ Employee deletion completed successfully for ${t}`)}catch(r){throw console.error("❌ Error deleting employee:",r),y.error(r instanceof Error?`Fehler beim Löschen: ${r.message}`:"Fehler beim Löschen des Mitarbeiters"),r}finally{g(!1),window.dispatchEvent(new CustomEvent("fetch-end"))}},fetchEmployees:h,refreshEmployees:()=>h(!0)}};export{O as u};
