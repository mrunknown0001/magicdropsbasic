var a=Object.defineProperty;var r=(s,t,e)=>t in s?a(s,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[t]=e;var i=(s,t,e)=>r(s,typeof t!="symbol"?t+"":t,e);const n=class n{constructor(){i(this,"reconnectTimers",new Map);i(this,"knownChannels",new Set);i(this,"lastActivity",Date.now());i(this,"triggerDataRefresh",()=>{this.updateActivity(),window.dispatchEvent(new CustomEvent("visibility-change-refresh"))});i(this,"handleVisibilityChange",()=>{document.visibilityState==="visible"&&(Date.now()-this.lastActivity>6e4&&(console.log("Tab became visible after inactivity, triggering reconnect"),setTimeout(()=>{this.knownChannels.forEach(c=>{this.triggerReconnect(c)}),this.triggerDataRefresh()},500)),this.updateActivity())});i(this,"updateActivity",()=>{this.lastActivity=Date.now()});console.log("ConnectionManager initialized - minimized version to prevent loading states"),document.addEventListener("visibilitychange",this.handleVisibilityChange),window.addEventListener("mousemove",this.updateActivity),window.addEventListener("keydown",this.updateActivity),window.addEventListener("click",this.updateActivity),window.addEventListener("touchstart",this.updateActivity)}static getInstance(){return n.instance||(n.instance=new n),n.instance}checkConnectivity(){return this.updateActivity(),navigator.onLine}scheduleReconnect(t,e=5e3){this.updateActivity(),this.knownChannels.add(t),this.reconnectTimers.has(t)&&clearTimeout(this.reconnectTimers.get(t)),console.log(`Scheduling reconnect for channel ${t} in ${e}ms`);const c=setTimeout(()=>{console.log(`Triggering reconnect for channel ${t}`),this.triggerReconnect(t),this.reconnectTimers.delete(t)},e);this.reconnectTimers.set(t,c)}triggerReconnect(t){t?window.dispatchEvent(new CustomEvent("supabase-reconnect",{detail:{channelId:t}})):window.dispatchEvent(new CustomEvent("supabase-reconnect"))}cleanup(){this.reconnectTimers.forEach(t=>clearTimeout(t)),this.reconnectTimers.clear(),document.removeEventListener("visibilitychange",this.handleVisibilityChange),window.removeEventListener("mousemove",this.updateActivity),window.removeEventListener("keydown",this.updateActivity),window.removeEventListener("click",this.updateActivity),window.removeEventListener("touchstart",this.updateActivity)}};i(n,"instance");let o=n;const h=o.getInstance();export{h as c};
