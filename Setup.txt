0. PostGreSQL installieren (https://www.postgresql.org/download/windows/) und das hier erledigen: https://sqlbackupandftp.com/blog/setting-windows-path-for-postgres-tools/
0.5 Bei Postgre achten welche Version bei programfiles ist und diese verwenden ebenfalls eine weitere line mit lib machen also zweimal die zeile einmal mit lib und bin
1. Supabase registrieren und Pro Paket buchen (25$) / Resend registrieren und API-Key holen bzw Domain pointen
2. Datenbank hinzufügen bei Supabase (Server Small), Passwort speichern
3. Bei Datenbank IPv4 Addon dazubuchen und den Connect string speichern
4. Die Datenbank-URL, den Anon Key und den Service Role Key auch speichern
5. CMD Fenster auf Windows öffnen und in den Folder wo die magicvicsv2_backup.dump Datei ist gehen mit: cd /dein/folder/pfad
6. Folgende Commands im CMD ausführen:

pg_restore --schema-only --no-owner --no-acl -d "postgresql://postgres:DEIN-DATENBANK-PASSWORT@db.DEIN-SUPABASE-PROJEKT-ID.supabase.co:5432/postgres" magicvicsv2_backup.dump

- hier die Fehler ignorieren und einfach laufen lassen bis Ende und dann:

pg_restore --data-only --disable-triggers --no-owner --no-acl -d "postgresql://postgres:DEIN-DATENBANK-PASSWORT@db.DEIN-SUPABASE-PROJEKT-ID.supabase.co:5432/postgres" magicvicsv2_backup.dump

- wieder laufen lassen und dann CMD Fenster schließen.


7. Server mit Ubuntu 22.04 kaufen
8. In den Server via SFTP einloggen (Bitvise, Filezilla) und die MagicVicsv2.zip und autoinstall.sh hochladen (root vom server /)
9. In den Server via SSH reingehen und sicherstellen dass die hochgeladenen File im root Ordner sind mit "ls"
10. Autoinstaller ausführen mit: bash autoinstall.sh
11. Den Anweisungen bis Ende folgen und glücklich sein.
12. Supabase -> Auth  -> auf 2. sidebar Sign in/providers ->  Auth Providers -> Email -> confirm email und secure email aus

# 🚀 MagicDropsBasic Deployment Guide - Komplette Anleitung

## 📋 Übersicht

Diese Anleitung führt Sie Schritt für Schritt durch das komplette Deployment von MagicDropsBasic auf Ihrem Ubuntu 22.04 Server. Wir beginnen mit der Supabase-Einrichtung und enden mit einer vollständig funktionsfähigen Webanwendung.

## 🗄️ Schritt 1: Supabase-Datenbank einrichten

### 1.1 Supabase-Account erstellen

1. **Besuchen Sie Supabase**:
- Gehen Sie zu: https://supabase.com
- Klicken Sie auf "Start your project"

2. **Account registrieren**:
- Melden Sie sich mit GitHub, Google oder E-Mail an
- Bestätigen Sie Ihre E-Mail-Adresse

### 1.2 Neues Projekt erstellen

1. **Dashboard öffnen**:
- Nach der Anmeldung gelangen Sie zum Supabase Dashboard
- Klicken Sie auf "New Project"

2. **Projekt konfigurieren**:
```
Organization: Wählen Sie Ihre Organisation
Name: MagicDropsBasic (oder Ihr gewünschter Name)
Database Password: [Starkes Passwort erstellen und NOTIEREN!]
Region: Europe West (eu-west-1) [Empfohlen für Deutschland]
Pricing Plan: Free (für den Anfang ausreichend)
```

3. **Projekt erstellen**:
- Klicken Sie "Create new project"
- Warten Sie 2-3 Minuten bis das Projekt bereit ist

### 1.3 Projekt-Daten sammeln

Nach der Erstellung finden Sie im Dashboard unter **Settings → API**:

```
Project URL: https://ihr-projekt-id.supabase.co
API Keys:
- anon/public: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
- service_role: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

Database Connection:
Host: db.ihr-projekt-id.supabase.co
Database: postgres
Port: 5432
User: postgres
Password: [Ihr gewähltes Passwort]
```

**⚠️ WICHTIG**: Notieren Sie sich alle diese Daten - Sie benötigen sie später!

### 1.4 Datenbank importieren

1. **PostgreSQL-Client installieren** (falls nicht vorhanden):

**Windows:**
- Download: https://www.postgresql.org/download/windows/
- Oder via Chocolatey: `choco install postgresql`

2. **Datenbank-Backup importieren**:

Verwenden Sie den folgenden Befehl (ersetzen Sie die Platzhalter):

```bash
# Schema importieren (Struktur)
pg_restore --schema-only --no-owner --no-acl -d "postgresql://postgres:<DEIN-DATENBANK-PASSWORT>@<DEINE-DATENBANK-URL>:5432/postgres" supabase_backup.dump

# Daten importieren
pg_restore --data-only --disable-triggers --no-owner --no-acl -d "postgresql://postgres:<DEIN-DATENBANK-PASSWORT>@<DEINE-DATENBANK-URL>:5432/postgres" supabase_backup.dump
```

3. **Import überprüfen**:
- Gehen Sie zu Supabase Dashboard → Table Editor
- Überprüfen Sie, ob alle Tabellen importiert wurden:
- `profiles`
- `contracts`
- `tasks`
- `phone_numbers`
- `settings`
- etc.

### 1.5 Supabase-Authentifizierung konfigurieren

1. **Authentication Settings**:
- Gehen Sie zu: Authentication → Settings
- **Site URL**: `https://ihre-subdomain.com` (Ihre zukünftige Subdomain)
- **Redirect URLs**: `https://ihre-subdomain.com/auth/callback`

2. **Row Level Security überprüfen**:
- Gehen Sie zu: Table Editor
- Für jede Tabelle: Klicken Sie auf das Zahnrad-Symbol
- Stellen Sie sicher, dass RLS aktiviert ist

## 🌐 Schritt 2: Subdomain und Server vorbereiten

### 2.1 Subdomain-DNS konfigurieren

1. **A-Record für Subdomain erstellen**:
- Loggen Sie sich in Ihr Domain-Control-Panel ein
- Erstellen Sie einen A-Record für Ihre gewünschte Subdomain:
```
Type: A
Name: app (für app.example.com)
Name: magic (für magic.example.com)
Name: drops (für drops.example.com)
Value: [Ihre Server-IP-Adresse]
TTL: 300 (oder Standard)
```

2. **Beliebte Subdomain-Beispiele**:
- `app.ihre-domain.com`
- `magic.ihre-domain.com`
- `drops.ihre-domain.com`
- `portal.ihre-domain.com`
- `admin.ihre-domain.com`

3. **DNS-Propagation prüfen**:
```bash
# Testen Sie die DNS-Auflösung Ihrer Subdomain
nslookup app.ihre-domain.com
ping app.ihre-domain.com
```

### 2.2 Ubuntu 22.04 Server-Anforderungen

**Mindest-Spezifikationen:**
- **RAM**: 2GB (empfohlen: 4GB)
- **Festplatte**: 20GB freier Speicher
- **CPU**: 1 vCPU (empfohlen: 2 vCPU)
- **Netzwerk**: Öffentliche IP-Adresse
- **Zugang**: Root- oder sudo-Berechtigung

**Ports die geöffnet sein müssen:**
- **22** (SSH)
- **80** (HTTP)
- **443** (HTTPS)
- **3001** (Backend - wird von Nginx weitergeleitet)

### 2.3 Server-Zugang testen

```bash
# SSH-Verbindung testen
ssh ihr-benutzername@ihre-server-ip

# Sudo-Rechte prüfen
sudo whoami
```

## 📦 Schritt 3: Projekt-Dateien vorbereiten

### 3.1 Projekt-ZIP erstellen (Windows)

1. **Navigieren Sie zu Ihrem Projekt-Ordner**:
```
C:\Users\GOLDFINGER\Desktop\MagicDropsBasic
```

2. **ZIP-Datei erstellen**:
- Wählen Sie alle Projekt-Dateien aus (NICHT den Ordner selbst)
- Rechtsklick → "Senden an" → "ZIP-komprimierter Ordner"
- Benennen Sie die ZIP-Datei: `MagicDropsBasic.zip`

**Alternative: PowerShell-Befehl**
```powershell
# Im Projekt-Verzeichnis ausführen
Compress-Archive -Path * -DestinationPath MagicDropsBasic.zip -Exclude node_modules,dist,.git,logs
```

### 3.2 Was in die ZIP-Datei gehört:
```
MagicDropsBasic.zip
├── src/ ✅ Enthalten
├── server/ ✅ Enthalten
├── public/ ✅ Enthalten
├── package.json ✅ Enthalten
├── vite.config.ts ✅ Enthalten
├── tailwind.config.js ✅ Enthalten
├── tsconfig.json ✅ Enthalten
├── autoinstall.sh ✅ Enthalten
├── SETUP-ANLEITUNG.md ✅ Enthalten
├── DEPLOYMENT-GUIDE.md ✅ Enthalten
├── node_modules/ ❌ NICHT enthalten
├── dist/ ❌ NICHT enthalten
├── .git/ ❌ NICHT enthalten
└── logs/ ❌ NICHT enthalten
```

### 3.3 Benötigte Dateien sammeln

Stellen Sie sicher, dass Sie folgende Dateien haben:
- ✅ `MagicDropsBasic.zip` (Projekt-Dateien)
- ✅ `autoinstall.sh` (Installations-Skript)
- ✅ `supabase_backup.dump` (Datenbank-Backup)

## 📤 Schritt 4: Dateien auf Server hochladen

### 4.1 SFTP-Client installieren

**Windows-Optionen:**
- **WinSCP** (Empfohlen): https://winscp.net/
- **FileZilla**: https://filezilla-project.org/
- **PuTTY SFTP**: Bereits mit PuTTY installiert

### 4.2 SFTP-Verbindung herstellen

**Mit WinSCP:**
1. Öffnen Sie WinSCP
2. Geben Sie Ihre Server-Daten ein:
- **Host**: Ihre Server-IP
- **Benutzername**: Ihr Ubuntu-Benutzername
- **Passwort**: Ihr Passwort (oder SSH-Key)
- **Port**: 22

### 4.3 Deployment-Ordner erstellen und Dateien hochladen

1. **SSH-Verbindung zum Server**:
```bash
ssh ihr-benutzername@ihre-server-ip
```

2. **Deployment-Ordner erstellen**:
```bash
mkdir ~/deployment
cd ~/deployment
```

3. **Dateien via SFTP hochladen**:
- Navigieren Sie zu `~/deployment/` auf dem Server
- Laden Sie folgende Dateien hoch:
- `MagicDropsBasic.zip`
- `autoinstall.sh`
- `supabase_backup.dump`

### 4.4 Dateien-Struktur überprüfen
```bash
ls -la ~/deployment/
# Sollte zeigen:
# MagicDropsBasic.zip
# autoinstall.sh
# supabase_backup.dump
```

## 🚀 Schritt 5: Automatisches Deployment ausführen

```bash
# Zum Deployment-Verzeichnis navigieren
cd ~/deployment

# Autoinstall-Skript ausführbar machen
chmod +x autoinstall.sh

# Installation starten
./autoinstall.sh
```

### 5.2 Interaktive Konfiguration

Das Skript wird Sie durch folgende Eingaben führen:

#### **System-Informationen**
- Zeigt Server-Details an
- Bestätigung zur Fortsetzung: `j` (Ja)

#### **Subdomain-Konfiguration**
```
Ihre Subdomain (z.B. app.example.com): app.ihre-domain.com
Installations-Pfad (Standard: /var/www/MagicDropsBasic): [Enter]
```

#### **Supabase-Konfiguration**
```
Supabase Projekt-URL: https://ihr-projekt-id.supabase.co
Supabase Anon Key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
Supabase Service Role Key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
```

#### **SMS Activate API**
```
SMS Activate API Key: ihr-api-key-hier
```

#### **SSL-Konfiguration**
```
E-Mail für Let's Encrypt: ihre-email@domain.com
```

#### **Optionale Features**
```
PM2 Web-Monitoring aktivieren? (J/n): j
PM2 Web-Port (Standard: 9615): [Enter]
```

### 5.3 Was das Skript automatisch macht

#### **System-Setup:**
- ✅ Ubuntu-Pakete aktualisieren
- ✅ Node.js 18.x installieren
- ✅ PM2 Prozess-Manager installieren
- ✅ Nginx Webserver installieren
- ✅ UFW Firewall konfigurieren

#### **Projekt-Deployment:**
- ✅ ZIP-Datei automatisch entpacken
- ✅ Projekt-Dateien kopieren
- ✅ Umgebungsvariablen erstellen (.env Dateien)
- ✅ Dependencies installieren (npm install)
- ✅ Frontend und Backend builden

#### **Produktions-Konfiguration:**
- ✅ PM2 für Backend-Prozess-Management
- ✅ Nginx für Frontend-Serving und API-Proxy
- ✅ SSL-Zertifikat von Let's Encrypt
- ✅ Sicherheits-Header konfigurieren
- ✅ Gzip-Komprimierung aktivieren

#### **Monitoring:**
- ✅ PM2 Web-Dashboard (optional)
- ✅ Log-Rotation einrichten
- ✅ System-Health-Checks

## 🎉 Schritt 6: Deployment-Abschluss und Verifikation

### 6.1 Installation erfolgreich

Nach erfolgreichem Deployment erhalten Sie:

```
╔══════════════════════════════════════════════════════════════╗
║ ║
║ 🎉 Installation erfolgreich! 🎉 ║
║ ║
╚══════════════════════════════════════════════════════════════╝

=== Ihre MagicDropsBasic-Installation ===
🌐 Subdomain: https://ihre-subdomain.com
📁 Projekt-Pfad: /var/www/MagicDropsBasic
🔧 Backend-Port: 3001
📊 PM2 Web: http://ihre-subdomain.com:9615
```

### 6.2 Funktionalität testen

1. **Subdomain aufrufen**:
- Öffnen Sie: `https://ihre-subdomain.com`
- Überprüfen Sie SSL-Zertifikat (grünes Schloss)

2. **Backend-API testen**:
```bash
curl https://ihre-subdomain.com/api/health
```

3. **Supabase-Verbindung testen**:
- Versuchen Sie sich zu registrieren/anzumelden
- Überprüfen Sie Datenbankverbindung

4. **PM2-Status überprüfen**:
```bash
pm2 status
pm2 logs magicdrops-backend
```

## 🔄 Schritt 7: Updates und Wartung

### 7.1 Zukünftige Updates deployen

1. **Neue ZIP-Datei erstellen** mit aktualisierten Dateien
2. **Via SFTP hochladen** und alte ZIP ersetzen
3. **Update-Skript ausführen**:
```bash
cd ~/deployment
./autoinstall.sh
```

### 7.2 Wichtige Wartungsbefehle

```bash
# PM2 Status überprüfen
pm2 status

# Backend neu starten
pm2 restart magicdrops-backend

# Nginx neu laden
sudo systemctl reload nginx

# SSL-Zertifikat erneuern
sudo certbot renew

# System-Updates
sudo apt update && sudo apt upgrade -y

# Logs anzeigen
pm2 logs magicdrops-backend
sudo tail -f /var/log/nginx/error.log
```

## 🛠️ Troubleshooting

### 8.1 Häufige Probleme

**Problem: Subdomain nicht erreichbar**
```bash
# DNS prüfen
nslookup ihre-subdomain.com

# Nginx Status
sudo systemctl status nginx

# Firewall prüfen
sudo ufw status
```

**Problem: Backend startet nicht**
```bash
# Logs überprüfen
pm2 logs magicdrops-backend

# Umgebungsvariablen prüfen
cat /var/www/MagicDropsBasic/server/.env

# Backend manuell starten
cd /var/www/MagicDropsBasic/server
npm start
```

**Problem: Supabase-Verbindung fehlgeschlagen**
```bash
# Verbindung testen
curl -H "apikey: IHR-ANON-KEY" "https://ihr-projekt-id.supabase.co/rest/v1/"

# Umgebungsvariablen überprüfen
cat /var/www/MagicDropsBasic/.env
```

**Problem: Datenbank-Import fehlgeschlagen**
```bash
# Import mit verbose Output wiederholen
pg_restore -v -d "postgresql://postgres:<PASSWORT>@db.<PROJEKT-ID>.supabase.co:5432/postgres" supabase_backup.dump

# Verbindung zur Datenbank testen
psql "postgresql://postgres:<PASSWORT>@db.<PROJEKT-ID>.supabase.co:5432/postgres" -c "\dt"
```

**Problem: SSL-Zertifikat Fehler**
```bash
# Certbot Status
sudo certbot certificates

# SSL manuell erneuern
sudo certbot renew --dry-run

# Nginx Konfiguration testen
sudo nginx -t
```

## ✅ Komplette Checkliste

### **Phase 1: Supabase-Setup**
- [ ] **Supabase-Account** erstellt
- [ ] **Supabase-Projekt** angelegt
- [ ] **Datenbank-Passwort** notiert
- [ ] **API-Keys** (anon + service_role) kopiert
- [ ] **Projekt-URL** notiert
- [ ] **Datenbank importiert** mit pg_restore
- [ ] **Supabase-Tabellen** überprüft
- [ ] **Authentication** konfiguriert

### **Phase 2: Subdomain & Server**
- [ ] **Subdomain-DNS** auf Server-IP konfiguriert
- [ ] **Ubuntu 22.04 Server** bereit
- [ ] **SSH-Zugang** funktioniert
- [ ] **Sudo-Rechte** verfügbar
- [ ] **Ports** 22, 80, 443 offen

### **Phase 3: Dateien & Upload**
- [ ] **MagicDropsBasic.zip** erstellt
- [ ] **autoinstall.sh** bereit
- [ ] **supabase_backup.dump** verfügbar
- [ ] **SFTP-Client** installiert
- [ ] **Alle Dateien** hochgeladen

### **Phase 4: Deployment**
- [ ] **SMS Activate API-Key** verfügbar
- [ ] **E-Mail für SSL-Zertifikat** bereit
- [ ] **Deployment-Skript** ausgeführt
- [ ] **Alle Konfigurationsdaten** eingegeben

### **Phase 5: Verifikation**
- [ ] **Subdomain** erreichbar (https://ihre-subdomain.com)
- [ ] **SSL-Zertifikat** aktiv
- [ ] **Backend-API** funktioniert
- [ ] **Supabase-Verbindung** getestet
- [ ] **Login/Registrierung** funktioniert
- [ ] **Alle Features** getestet

**🎉 Herzlichen Glückwunsch! Ihre MagicDropsBasic-Anwendung ist jetzt live und produktionsbereit!**

---

## 📞 Support

Bei Problemen:
1. **Logs sammeln** und analysieren
2. **Fehlermeldungen** dokumentieren
3. **System-Status** überprüfen
4. **Konfiguration** validieren
5. **Checkliste** erneut durchgehen